app: chikachika
service: chikachika-API-serverless
org: jiwon112

custom:
  #secrets: ${file(secrets.json)}
  apigwBinary:
    types:           #list of mime-types 
       - 'multipart/form-data'

dashboard:
  lambda:
    enabled: false

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # optional, default: dev
  profile: ${self:provider.stage}Profile
  region: ap-northeast-1 # optional, default: us-east-1
  stackName: chikachika-API-serverless-${self:provider.stage} # Use a custom name for the CloudFormation stack
  apiName: chikachika-API-serverless-${self:provider.stage} # Use a custom name for the API Gateway API
  apiGateway:
    shouldStartNameWithService: true,
    minimumCompressionSize: 1024
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'image/*'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: "arn:aws:s3:::chikachika-review-images/*"
  environment:
    JWT_SECRET: ${param:JWT_SECRET}
    NCP_access_token: ${param:NCP_access_token}
    NCP_secret_key: ${param:NCP_secret_key}
    NCP_serviceID: ${param:NCP_serviceID}
    AWS_Access_Key_ID: ${param:AWS_Access_Key_ID}
    AWS_Secret_Access_Key: ${param:AWS_Secret_Access_Key}
  memorySize: 1024 # optional, in MB, default: 1024
  timeout: 6 # optional, in seconds, default: 6
  versionFunctions: false # optional, default: true
functions:
  verify-token:
    handler: services/authorize.verifyToken
  api:
    name: ${self:service}-${self:provider.stage}
    handler: api/app.handler # ${DIR}/${FILE}.${MODULE}
    events:
      - http:
          path: api/{proxy+}
          method: ANY
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  getUserInfo:
    handler: services/user.getUserInfo
    events:
      - http:
          path: userInfo
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  allTagItems:
    handler: services/search.allTagItems
    events:
      - http:
          path: search/allTagItems
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  getRecentSearch:
    handler: services/recentSearch.getRecent
    events:
      - http:
          path: search/recent
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  delRecentSearch:
    handler: services/recentSearch.delRecent
    events:
      - http:
          path: search/recent
          method: delete
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  reviewSearch:
    handler: services/search.reviews
    events:
      - http:
          path: search/reviews
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  localClinicSearch:
    handler: services/search.localClinicSearch
    events:
      - http:
          path: clinics
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  aroundClinics:
    handler: services/around.clinics
    events:
      - http:
          path: around/clinics
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  treatmentSearch:
    handler: services/search.treatmentItems
    events:
      - http:
          path: search/treatments
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  clinicSearch:
    handler: services/search.dentalClinics
    events:
      - http:
          path: search/clinics
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  symptomSearch:
    handler: services/search.symptomItems
    events:
      - http:
          path: search/symptoms
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  login:
    handler: services/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  sendTokenToPhoneNumber:
    handler: services/register.sendTokenToPhoneNumber
    events:
      - http:
          path: sendTokenToPhoneNumber
          method: post
          cors: true
  verify_phoneNumber:
    handler: services/register.verifyPhoneNumber
    events:
      - http:
          path: verifyPhoneNumber
          method: post
          cors: true
  register:
    handler: services/register.handler
    events:
      - http:
          path: register
          method: post
          cors: true
  social_login:
    handler: services/social_login.handler
    events:
      - http:
          path: social_login
          method: post
          cors: true
  socialUserCheck:
    handler: services/social_login.socialUserCheck
    events:
      - http:
          path: socialUserCheck
          method: post
          cors: true
  searchCities:
    handler: services/residence.searchCities
    events:
      - http:
          path: search/cities
          method: get
          cors: true
  citiesBycurrentLocation:
    handler: services/residence.citiesBycurrentLocation
    events:
      - http:
          path: search/cities/currentLocation
          method: get
          cors: true
  addUserResidence:
    handler: services/residence.addUserResidence
    events:
      - http:
          path: residence
          method: post
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  changeUserResidence:
    handler: services/residence.changeUserResidence
    events:
      - http:
          path: residence
          method: put
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  deleteUserResidence:
    handler: services/residence.deleteUserResidence
    events:
      - http:
          path: residence
          method: delete
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  getUserResidence:
    handler: services/residence.getUserResidence
    events:
      - http:
          path: residence
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  addLikeReview:
    handler: services/like.addLikeReview
    events:
      - http:
          path: like/review
          method: post
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  removeLikeReview:
    handler: services/like.removeLikeReview
    events:
      - http:
          path: like/review
          method: delete
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  addLikeCommunity:
    handler: services/like.addLikeCommunity
    events:
      - http:
          path: like/communityPost
          method: post
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  removeLikeCommunity:
    handler: services/like.removeLikeCommunity
    events:
      - http:
          path: like/communityPost
          method: delete
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  addScrapReview:
    handler: services/scrap.addScrapReview
    events:
      - http:
          path: scrap/review
          method: post
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  removeScrapeReview:
    handler: services/scrap.removeScrapReview
    events:
      - http:
          path: scrap/review
          method: delete
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  addScrapCommunity:
    handler: services/scrap.addScrapCommunities
    events:
      - http:
          path: scrap/communityPost
          method: post
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  removeScrapCommunity:
    handler: services/scrap.removeScrapCommunities
    events:
      - http:
          path: scrap/communityPost
          method: delete
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  detailClinics:
    handler: services/dentalClinic.detailClinics
    events:
      - http:
          path: clinic/detail
          method: get
          cors: true
          authorizer:
              name: verify-token
              # this tells the lambda where to take the information from,
              # in our case the HTTP Authorization header
              identitySource: method.request.header.Authorization
              resultTtlInSeconds: 0 #7776000 # cache the result for 90 day
  importDentalClinic:
    handler: services/dentalClinic.importDentalClinic
    package:
      include:
        - dental_clinic_json/dental_database.json
    events:
      - http:
          path: importDentalClinic
          method: post
          cors: true
  importDentalClinicCity:
    handler: services/dentalClinic.importDentalClinicCity
    events:
      - http:
          path: importDentalClinicCity
          method: post
          cors: true
  importDentalSubject:
    handler: services/subject.importDentalSubject
    events:
      - http:
          path: importDentalSubject
          method: post
          cors: true
  clinicSubjects:
    handler: services/subject.clinicSubjects
    package:
      include:
        - dental_clinic_json/dental_treatment_subject_kid.json
    events:
      - http:
          path: clinicSubjects
          method: post
          cors: true
  getNonPaymentItemHospList:
    handler: services/dentalClinic.getNonPaymentItemHospList
    events:
      - http:
          path: getNonPaymentItemHospList
          method: get
          cors: true
  dbUpdate:
    handler: services/dbReset.handler
    events:
      - http:
          path: dbUpdate
          method: get
          cors: true
  duplicateNameClinics:
    handler: services/dentalClinic.duplicateNameClinics
    events:
      - http:
          path: duplicateNameClinics
          method: get
          cors: true
  specialTreatment:
    handler: services/subject.specialTreatment
    events:
      - http:
          path: specialTreatment
          method: post
          cors: true
plugins:
  - serverless-offline
  - serverless-apigw-binary
  - serverless-plugin-cloudwatch-dashboard